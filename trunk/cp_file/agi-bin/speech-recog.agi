#!/usr/bin/env perl

#
# AGI script that renders speech to text using Google's speech recognition engine.
#
# Version 0.5
#
# Copyright (C) 2011 - 2012, Lefteris Zafiris <zaf.000@gmail.com>
#
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2. See the COPYING file
# at the top of the source tree.
#
# -----
# Usage
# -----
# agi(speech-recog.agi,[lang],[timeout],[intkey],[NOBEEP])
# Records from the current channel untill 3 seconds of silence are detected
# (this can be set by the user by the 'timeout' argument, -1 for no timeout) or the
# interrupt key (# by default) is pressed. If NOBEEP is set, no beep sound is played
# back to the user to indicate the start of the recording.
# The recorded sound is send over to googles speech recognition service and the
# returned text string is assigned as the value of the channel variable 'utterance'.
# The scripts sets the following channel variables:
# status     : Return status. 0 means success, non zero values indicate different errors.
# id         : Some id string that googles engine returns, not very useful(?).
# utterance  : The generated text string.
# confidence : A value between 0 and 1 indicating how 'confident' the recognition engine
#     feels about the result. Values bigger than 0.95 usually mean that the
#     resulted text is correct.
#
# Parameters like default language, timeout, interrupt key(s), recording sample rate and
# use of SSL for encrypted web traffic can be set up by altering the following variables:
# Default language:
#	$language
# Default timeout:
#	$timeout (value in seconds of silence before recording is stopped)
# Default interupt key:
#	$intkey (can be any digit from 0 to 9 or # and *, or a combination of them)
# Sample rate:
#	$samplerate (value in Hz, 8000 or 16000 if used with wideband codecs)
# SSL:
#	$use_ssl (0: disable, 1: enable)
#

use warnings;
use strict;
use File::Temp qw(tempfile);
use LWP::UserAgent;
$| = 1;

# ----------------------------- #
#   User defined parameters:    #
# ----------------------------- #
# Default language              #
#my $language = "en-US";
my $language = "ru-RU";
# Default max silence timeout   #
my $timeout    = 3;

# Default interrupt key         #
my $intkey     = "#";

# Input audio sample rate       #
my $samplerate = 8000;

# Use SSL                       #
my $use_ssl = 0;

# Verbose debugging messages    #
my $debug = 0;

# ----------------------------- #

my %AGI;
my $ua;
my $fh;
my $tmpname;
my $format;
my @result;
my $name;
my $audio;
my $uaresponse;
my %response;
my $endian;
my $url;
my $silence;
my $beep       = "BEEP";
my $comp_level = -8;
my $ua_timeout = 10;
my $tmpdir     = "/tmp";
my $filetype   = "x-flac";
my $host       = "www.google.com/speech-api/v1/recognize?xjerr=1&client=chromium";
my $flac       = `/usr/bin/which flac`;

# Check endianness #
$endian = (unpack("h*", pack("s", 1)) =~ /01/) ? "big" : "little";

# Store AGI input #
while (<STDIN>) {
	chomp;
	last if (!length);
	$AGI{$1} = $2 if (/^agi_(\w+)\:\s+(.*)$/);
}
($AGI{arg_1}, $AGI{arg_2}, $AGI{arg_3}, $AGI{arg_4}) = @ARGV;

$name = " -- $AGI{request}:";

# Abort if required programs not found. #
die "$name flac is missing. Aborting.\n" if (!$flac);

chomp($flac);
print STDERR "$name Found flac in: $flac\n" if ($debug);

# Setting recording file format according to sample rate. #
if ($samplerate == 16000) {
	$format    = "sln16";
} else {
	$format     = "sln";
	$samplerate = 8000;
}

# Setting language, timeout, interrupt keys and BEEP indication #
if (length($AGI{arg_1})) {
	$language = $AGI{arg_1} if ($AGI{arg_1} =~ /^[a-z]{2}(-[a-zA-Z]{2,6})?$/);
}

if (length($AGI{arg_2})) {
	if ($AGI{arg_2} == -1) {
		$silence = "";
	} elsif ($AGI{arg_2} =~ /^\d+$/) {
		$silence = "s=$AGI{arg_2}";
	} else {
		$silence = "s=$timeout";
	}
} else {
	$silence = "s=$timeout";
}

if (length($AGI{arg_3})) {
	$intkey = "0123456789#*" if ($AGI{arg_3} eq "any");
	$intkey = $AGI{arg_3} if ($AGI{arg_3} =~ /^[0-9*#]+$/);
}

if (length($AGI{arg_4})) {
	$beep = "" if ($AGI{arg_4} eq "NOBEEP");
}

# Answer channel if not already answered #
print STDERR "$name Checking channel status.\n" if ($debug);
print "CHANNEL STATUS\n";
@result = &checkresponse();
if ($result[0] == 4) {
	print STDERR "$name Answering channel.\n" if ($debug);
	print "ANSWER\n";
	&checkresponse();
}

# Reset variables. #
%response = (
	utterance  => -1,
	status     => -1,
	id         => -1,
	confidence => -1,
);
print STDERR "$name Clearing channel variables.\n" if ($debug);
foreach (keys %response) {
	print "SET VARIABLE \"$_\" \"$response{$_}\"\n";
	&checkresponse();
}

# Hnadle interrupts #
$SIG{'INT'} = \&int_handler;
$SIG{'HUP'} = \&int_handler;

# Record file #
($fh, $tmpname) = tempfile("stt_XXXXXX", DIR => $tmpdir, UNLINK => 1);

print STDERR "$name Recording Format: $format, Rate: $samplerate Hz,
	$silence, Interrupt keys: $intkey\n" if ($debug);

print "RECORD FILE $tmpname $format \"$intkey\" \"-1\" $beep \"$silence\"\n";
@result = &checkresponse();
die "$name Failed to record file, aborting...\n" if ($result[0] == -1);

if ($debug) {
	print STDERR "$name Languge: $language,  SSL: $use_ssl\n";
	print STDERR "$name Playing back recorded file.\n";
	print "STREAM FILE $tmpname \"\"\n";
	@result = &checkresponse();
	print STDERR "$name Failed to play file\n" if ($result[0] == -1);
}

# Encode file to flac. #
system($flac, $comp_level, "--totally-silent", "--channels=1", "--endian=$endian",
	"--sign=signed", "--bps=16", "--force-raw-format", "--sample-rate=$samplerate",
	"$tmpname.$format") == 0 or die "$name $flac failed: $?\n";

open($fh, "<", "$tmpname.flac") or die "Can't read file: $!";
$audio = do { local $/; <$fh> };
close($fh);

if ($use_ssl) {
	$url = "https://" . $host;
	$ua = LWP::UserAgent->new(ssl_opts => {verify_hostname => 1});
} else {
	$url = "http://" . $host;
	$ua = LWP::UserAgent->new;
}

$ua->agent("Mozilla/5.0 (X11; Linux) AppleWebKit/535.2 (KHTML, like Gecko)");
$ua->timeout($ua_timeout);
$uaresponse = $ua->post(
	"$url&lang=$language",
	Content_Type => "audio/$filetype; rate=$samplerate",
	Content      => "$audio",
);
die "$name Unable to get speech data.\n" if (!$uaresponse->is_success);

if ($uaresponse->content =~ /^\{"status":(\d*),"id":"(.*)","hypotheses":\[(.*)\]\}$/) {
	$response{status} = "$1";
	$response{id}     = "$2";
	print STDERR "Error reading audio file\n" if ($response{status} == 5);
	if ($3 =~ /^\{"utterance":"(.*)","confidence":(.*)\}/) {
		$response{utterance}  = "$1";
		$response{confidence} = "$2";
		# Remove spaces between digits #
		$response{utterance}  =~ s/(\d)\s(\d)/$1$2/g;
	}
}

print STDERR "$name The response was:\n", $uaresponse->content if ($debug);

foreach (keys %response) {
	print STDERR "$name Setting variable: $_ = $response{$_}\n" if ($debug);
	print "SET VARIABLE \"$_\" \"$response{$_}\"\n";
	&checkresponse();
}
exit;

sub checkresponse {
	my $input = <STDIN>;
	my @values;

	chomp $input;
	if ($input =~ /^200/) {
		$input =~ /result=(-?\d+)\s?(.*)$/;
		if (!length($1)) {
			print STDERR "$name Command failed: $input\n";
			@values = ("-1");
		} else {
			print STDERR "$name Command returned: $input\n" if ($debug);
			@values = ("$1", "$2");
		}
	} else {
		print STDERR "$name Unexpected result: $input\n";
		@values = ("-1");
	}
	return @values;
}

sub int_handler {
	die "$name Interrupt signal received, terminating...\n";
}

END {
	if ($tmpname) {
		print STDERR "$name Cleaning temp files.\n" if ($debug);
		unlink glob "$tmpname*";
	}
}
